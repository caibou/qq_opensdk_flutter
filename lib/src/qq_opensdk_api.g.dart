// Autogenerated from Pigeon (v11.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

enum QQSceneType {
  qq,
  qzone,
}

enum QQShareRetCode {
  success,
  failed,
  common,
  userCancel,
}

class QQShareBaseModel {
  QQShareBaseModel({
    required this.title,
    required this.content,
    required this.scene,
  });

  String title;

  String content;

  QQSceneType scene;

  Object encode() {
    return <Object?>[
      title,
      content,
      scene.index,
    ];
  }

  static QQShareBaseModel decode(Object result) {
    result as List<Object?>;
    return QQShareBaseModel(
      title: result[0]! as String,
      content: result[1]! as String,
      scene: QQSceneType.values[result[2]! as int],
    );
  }
}

class QQSdkOnResp {
  QQSdkOnResp({
    required this.type,
    this.description,
    this.result,
    this.extendInfo,
    this.errorDescription,
  });

  int type;

  String? description;

  String? result;

  String? extendInfo;

  String? errorDescription;

  Object encode() {
    return <Object?>[
      type,
      description,
      result,
      extendInfo,
      errorDescription,
    ];
  }

  static QQSdkOnResp decode(Object result) {
    result as List<Object?>;
    return QQSdkOnResp(
      type: result[0]! as int,
      description: result[1] as String?,
      result: result[2] as String?,
      extendInfo: result[3] as String?,
      errorDescription: result[4] as String?,
    );
  }
}

class QQShareWebPage {
  QQShareWebPage({
    required this.pageUrl,
    required this.thumbImageUrl,
    required this.base,
  });

  String pageUrl;

  String thumbImageUrl;

  QQShareBaseModel base;

  Object encode() {
    return <Object?>[
      pageUrl,
      thumbImageUrl,
      base.encode(),
    ];
  }

  static QQShareWebPage decode(Object result) {
    result as List<Object?>;
    return QQShareWebPage(
      pageUrl: result[0]! as String,
      thumbImageUrl: result[1]! as String,
      base: QQShareBaseModel.decode(result[2]! as List<Object?>),
    );
  }
}

class QQShareImage {
  QQShareImage({
    this.imageData,
    required this.base,
  });

  Uint8List? imageData;

  QQShareBaseModel base;

  Object encode() {
    return <Object?>[
      imageData,
      base.encode(),
    ];
  }

  static QQShareImage decode(Object result) {
    result as List<Object?>;
    return QQShareImage(
      imageData: result[0] as Uint8List?,
      base: QQShareBaseModel.decode(result[1]! as List<Object?>),
    );
  }
}

class _QQOpenSdkApiCodec extends StandardMessageCodec {
  const _QQOpenSdkApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is QQShareBaseModel) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is QQShareImage) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is QQShareWebPage) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return QQShareBaseModel.decode(readValue(buffer)!);
      case 129: 
        return QQShareImage.decode(readValue(buffer)!);
      case 130: 
        return QQShareWebPage.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class QQOpenSdkApi {
  /// Constructor for [QQOpenSdkApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  QQOpenSdkApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _QQOpenSdkApiCodec();

  Future<void> registerApp(String arg_appId, String arg_urlSchema, String? arg_universalLink) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.qq_opensdk_flutter.QQOpenSdkApi.registerApp', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_appId, arg_urlSchema, arg_universalLink]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> isQQInstalled() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.qq_opensdk_flutter.QQOpenSdkApi.isQQInstalled', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  Future<bool> joinQQGroup(String arg_qqGroupInfo) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.qq_opensdk_flutter.QQOpenSdkApi.joinQQGroup', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_qqGroupInfo]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  Future<bool> shareWebPage(QQShareWebPage arg_req) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.qq_opensdk_flutter.QQOpenSdkApi.shareWebPage', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_req]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  Future<bool> shareImage(QQShareImage arg_req) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.qq_opensdk_flutter.QQOpenSdkApi.shareImage', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_req]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }
}

class _QQSdkOnRespApiCodec extends StandardMessageCodec {
  const _QQSdkOnRespApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is QQSdkOnResp) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return QQSdkOnResp.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

abstract class QQSdkOnRespApi {
  static const MessageCodec<Object?> codec = _QQSdkOnRespApiCodec();

  void onResp(QQSdkOnResp resp);

  static void setup(QQSdkOnRespApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.qq_opensdk_flutter.QQSdkOnRespApi.onResp', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.qq_opensdk_flutter.QQSdkOnRespApi.onResp was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final QQSdkOnResp? arg_resp = (args[0] as QQSdkOnResp?);
          assert(arg_resp != null,
              'Argument for dev.flutter.pigeon.qq_opensdk_flutter.QQSdkOnRespApi.onResp was null, expected non-null QQSdkOnResp.');
          api.onResp(arg_resp!);
          return;
        });
      }
    }
  }
}
